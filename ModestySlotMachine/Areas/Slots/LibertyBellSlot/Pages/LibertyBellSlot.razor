@using Microsoft.Extensions.Logging;
@using ModestySlotMachine.Areas.Slots.LibertyBellSlot.Services;
@using ModestySlotMachine.Areas.Slots.LibertyBellSlot.Util
@using ModestySlotMachine.Common.Util;
@using ModestySlotMachine.Core.Entities;
@using ModestySlotMachine.Core.Services;
@using ModestySlotMachine.Shared.Components
@using ModestySlotMachine.Slots.LibertyBell;
@using System.Globalization
@using static ModestySlotMachine.Slots.LibertyBell.LibertyBellSlotMachine;

@inject LibertyBellSlotService LibertyBellSlotService
@inject LibertyBellAudioService AudioService
@inject UserDataService UserDataService
@inject ILogger<LibertyBellSlot> Logger
@inject IJSRuntime JSRuntime

<div class="component-wrapper">
    <div class="component">
        <div class="title">
            <h1>🕭 LIBERTY BELL 🕭</h1>
            <span>Hembert & Warlett Inc.</span>
        </div>
        <div class="reels-wrapper">
            <div class="reels">
                <div class="reel-payline"></div>
                <Reel @ref="reel1" ReelNumber="1" SlotMachine="machine"></Reel>
                <Reel @ref="reel2" ReelNumber="2" SlotMachine="machine"></Reel>
                <Reel @ref="reel3" ReelNumber="3" SlotMachine="machine"></Reel>
            </div>
        </div>
        <div class="controls">
            <div class="container mb-4">
                <input @bind="isInfiniteSpinModeActive"
                       type="checkbox" class="btn-check" id="btn-check" autocomplete="off">
                <label class="btn btn-repeat" for="btn-check">
                    @if (isInfiniteSpinModeActive)
                    {
                        <span class="mdi mdi-repeat"></span>
                    }
                    else
                    {
                        <span class="mdi mdi-repeat-off"></span>
                    }
                </label>
                <button type="button" class="btn btn-pull" @onclick="OnSpinBtnClickAsync" disabled="@(isSpinning ? "disabled" : null)">
                    Pull
                </button>
            </div>
            <div class="balance-wrapper">
                <div class="balance">
                    <small class="balance-label">Balance</small>
                    @string.Format(new LibertyBellCurrencyFormatPrivider(), "{0}", userData?.Balance)
                </div>
            </div>
            <div class="balance-wrapper balance-bet-wrapper">
                <div class="balance">
                    <small class="balance-label">Bet</small>
                    <button @onclick="() => ChangeBet(-BetChangeStep)" type="button" class="btn btn-icon"><span class="mdi mdi-arrow-left-thick"></span></button>
                    @string.Format(new LibertyBellCurrencyFormatPrivider(), "{0}", bet)
                    <button @onclick="() => ChangeBet(BetChangeStep)" type="button" class="btn btn-icon"><span class="mdi mdi-arrow-right-thick"></span></button>
                </div>
            </div>
            <div class="payout-chart-wrapper">
                <div class="payout-chart">
                <table>
                    @foreach (var payout in payouts.Take(3))
                    {
                        <tr>
                            <td>@payout.Title</td>
                            <td class="payout">
                                @foreach (var reqirement in payout.Requirements)
                                {
                                    foreach (var _ in Enumerable.Range(0, reqirement.Amount))
                                    {
                                        <ReelSymbolPreview Symbol="reqirement.Symbol"></ReelSymbolPreview>
                                    }
                                }
                            </td>
                            <td>x @payout.Reward</td>
                        </tr>
                    }
                </table>
                <div class="vertical-divider"></div>
                <table>
                    @foreach (var payout in payouts.Skip(3).Take(3))
                    {
                        <tr>
                            <td>@payout.Title</td>
                            <td class="payout">
                                @foreach (var reqirement in payout.Requirements)
                                {
                                    foreach (var _ in Enumerable.Range(0, reqirement.Amount))
                                    {
                                        <ReelSymbolPreview Symbol="reqirement.Symbol"></ReelSymbolPreview>
                                    }
                                }
                            </td>
                            <td>x @payout.Reward</td>
                        </tr>
                    }
                </table>
            </div>
            </div>
        </div>
    </div>
</div>
<BalanceManagementModal @ref="balanceManagementModal"></BalanceManagementModal>

@implements IDisposable

@code {
    private const string GameSettingsKey = "libertyBellSlot";
    private const string GameSettingsBetKey = GameSettingsKey + "Bet";
    private UserData userData;
    private Reel reel1, reel2, reel3;
    private BalanceManagementModal balanceManagementModal;
    private uint reel1SpinDuration = 1000,
        reel2SpinDuration = 2000,
        reel3SpinDuration = 4000;
    private LibertyBellSlotMachine machine;
    private LibertyBellSymbols[] reelValues;
    private bool isSpinning = false;
    private Payout<LibertyBellSymbols>[] payouts;
    private Payout<LibertyBellSymbols> winCombination;
    private decimal bet = MinBet;
    private const decimal MinBet = 0.01m;
    private const decimal MaxBet = 3m;
    private const decimal BetChangeStep = 0.01m;
    private bool isInfiniteSpinModeActive;

    private CancellationTokenSource cts = new CancellationTokenSource();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        reelValues = new LibertyBellSymbols[3];
        machine = LibertyBellSlotService.CreateSlotMachine();
        payouts = LibertyBellSlotService.GetPayouts().OrderByDescending(p => p.Reward).ToArray();

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        userData = await UserDataService.GetUserDataAsync();

        AudioService.MusicVolume = userData.UserSettings.SoundVolume;
        AudioService.Volume = userData.UserSettings.FxSoundVolume;

        if (userData.GameRelatedSettings.ContainsKey(GameSettingsBetKey))
            bet = Convert.ToDecimal(userData.GameRelatedSettings[GameSettingsBetKey]);

        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Delay(LibertyBellConstants.TracksChangeDelayMs, cts.Token).ContinueWith(task =>
            {
                if (!task.IsCanceled)
                    AudioService.PlayBackgroundMusic();
            });
        }

        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        AudioService.SaveCurrentPlayerState();
        cts.Cancel();
        AudioService.StopAll();
    }

    async Task OnSpinBtnClickAsync()
    {
        do
        {
            if (!IsGameAvailable())
            {
                balanceManagementModal.Show();
                StateHasChanged();
                return;
            }

            await MakeSpinAsync();
            await Task.Delay(500);
        }
        while (isInfiniteSpinModeActive);
    }

    async Task MakeSpinAsync()
    {
        userData.Balance -= bet;
        StateHasChanged();
        await UserDataService.SaveUserDataAsync(userData);

        winCombination = null;
        var results = machine.MakeSpin();

        AudioService.PlayReelSpinSound();

        isSpinning = true;
        await Task.WhenAll(
            reel1.SpinAsync(results[0], reel1SpinDuration).ContinueWith(task => {
                if (!task.IsCanceled)
                    AudioService.PlayReelStopSound();
            }, cts.Token),
            reel2.SpinAsync(results[1], reel2SpinDuration).ContinueWith(task =>
            {
                if (!task.IsCanceled)
                    AudioService.PlayReelStopSound();
            }, cts.Token),
            reel3.SpinAsync(results[2], reel3SpinDuration).ContinueWith(task =>
            {
                if (!task.IsCanceled)
                    AudioService.PlayReelStopSound();
            }, cts.Token)
        );
        isSpinning = false;

        AudioService.StopReelSpinSound();

        if (machine.HasPayout(out Payout<LibertyBellSymbols> result) /* || true */)
        {
            reel1.DisplayWinComboStatusAsync();
            reel2.DisplayWinComboStatusAsync();
            reel3.DisplayWinComboStatusAsync();

            await Task.Delay(400);
            AudioService.PlayBigWinSound();
            await Task.Delay(1000);
            AudioService.PlayConisFallSound();

            // userData.Balance += result?.Reward ?? 1;
            userData.Balance += result.Reward * bet;
            StateHasChanged();

            await UserDataService.SaveUserDataAsync(userData);
        }
    }

    bool IsGameAvailable()
    {
        return userData?.Balance >= bet;
    }

    void ChangeBet(decimal value)
    {
        bet += value;
        if (bet < MinBet)
            bet = MinBet;
        if (bet > MaxBet)
            bet = MaxBet;

        userData.GameRelatedSettings[GameSettingsBetKey] = bet.ToString(CultureInfo.InvariantCulture);
        UserDataService.SaveUserDataAsync(userData);
    }
}

<style>
    main {
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>