@using Microsoft.Extensions.Logging;
@using ModestySlotMachine.Slots.LibertyBell;

@inject ILogger<LibertyBellSlot> Logger
@inject IJSRuntime JSRuntime

<div class="reel" data-reel="@ReelNumber">    
    <ul class="symbols-container">
        @foreach (var symbol in Enum.GetValues<LibertyBellSymbols>())
        {
            <li class="reel-symbol show reel-symbol-@(symbol.ToString())" data-symbol="@symbol.ToString()"></li>
        }
        @foreach (var symbol in Enum.GetValues<LibertyBellSymbols>())
        {
            <li class="reel-symbol show reel-symbol-@(symbol.ToString())" data-symbol="@symbol.ToString()"></li>
        }
    </ul>
    <div class="border-fade-top"></div>
    <div class="border-fade-bottom"></div>
</div>

@code {
    [Parameter] public int ReelNumber { get; set; }
    [Parameter] public LibertyBellSlotMachine SlotMachine { get; set; }

    private IJSObjectReference _jsModule;
    private IJSObjectReference _reelRef;

    protected override async Task OnInitializedAsync()
    {
        _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./Areas/Slots/LibertyBellSlot/Pages/Reel.razor.js");

        _reelRef = await _jsModule.InvokeAsync<IJSObjectReference>("createReel", ReelNumber);

        await base.OnInitializedAsync();
    }

    public async Task SpinAsync(LibertyBellSymbols resultSymbol, uint spinDuration)
    {
        await _reelRef.InvokeAsync<object>("stopWinDisplay");
        await _reelRef.InvokeAsync<object>("spinReelWithResult", resultSymbol, spinDuration);
    }

    public async Task DisplayWinComboStatusAsync()
    {
        await _reelRef.InvokeAsync<object>("displayWin");
        await Task.Delay(4000);
        await _reelRef.InvokeAsync<object>("stopWinDisplay");
    }
}